// https://projecteuler.net/problem=2
//
// Each new term in the Fibonacci sequence is generated by adding the previous
// two terms. By starting with 1 and 2, the first 10 terms will be:
//
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
// By considering the terms in the Fibonacci sequence whose values do not exceed
// four million, find the sum of the even-valued terms.

package euler

import (
  "math"
  "fmt"
)

func fib(n int) int {
  a := 0
  b := 1
  // Iterate until desired position in sequence.

  for i := 0; i < n; i++ {
    // Use temporary variable to swap values.
    temp := a
    a = b
    b = temp + a
  }

  return a
}

func Simple() int {
  max := 4000000
  sumOfEven := 0

  for i, j := 1, fib(1); j <= max; i, j = i + 1, fib(i) {
    by2 := int(math.Mod(float64(j), 2))

    if (by2 == 0) {
      sumOfEven += j
    }

    fmt.Printf("%d %d %d\n", i, j, sumOfEven)
  }

  return sumOfEven
}
